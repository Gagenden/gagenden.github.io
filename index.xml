<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gagenden--个人学习网站</title>
    <link>http://gagenden.top/</link>
    <description>Recent content on Gagenden--个人学习网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 09 Sep 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://gagenden.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS 知识总结</title>
      <link>http://gagenden.top/post/css%E6%9C%89%E6%84%9F/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/css%E6%9C%89%E6%84%9F/</guid>
      
        <description>

&lt;h1 id=&#34;css-知识总结&#34;&gt;CSS 知识总结&lt;/h1&gt;

&lt;h2 id=&#34;浏览器的渲染原理&#34;&gt;浏览器的渲染原理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;根据 HTML 构建 HTML 树（构建 DOM）&lt;/li&gt;
&lt;li&gt;根据 CSS 构建 CSS 树（CSSOM）&lt;/li&gt;
&lt;li&gt;将两棵树合并为渲染树（render tree）&lt;/li&gt;
&lt;li&gt;Layout 布局（文档流，盒模型，计算大小，位置）&lt;/li&gt;
&lt;li&gt;paint 绘制（绘制颜色、背景等）&lt;/li&gt;
&lt;li&gt;composite（根据层叠关系展示页面）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;动画-transition-过渡-https-developer-mozilla-org-zh-cn-docs-web-css-transition&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition&#34;&gt;动画 transition（过渡）&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;transition 属性是 transition-property（指定应用过渡属性的名称），transition-duration（多少时间内完成过渡），transition-timing-function（变化速度 ease | ease-in | ease-out | ease-in-out | linear） 和 transition-delay(延迟多少时间开始过渡) 的一个简写属性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;动画-animation-https-developer-mozilla-org-zh-cn-docs-web-css-animation&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation&#34;&gt;动画 animation&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;animation 属性是 animation-name（动画名称），animation-duration(时长), animation-timing-function(过渡方式)，animation-delay（延迟），animation-iteration-count（动画在结束前运行的次数），animation-direction（方向），animation-fill-mode（填充方式） 和 animation-play-state（是否赞停） 属性的一个简写属性形式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用@keyframes 的语法声明 animation-name&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;语法一&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes animation-name {
    from{
        .....
    }
    to {
        ....
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;语法二&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes animation-name {
    0 {
        ....
    }
    15% {
        ....
    }
    50% {
        ....
    }
    100% {
        .....
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;取值&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;animation-duration(时长): 单位是 s 和 ms&lt;/li&gt;
&lt;li&gt;animation-timing-function(过渡方式)：ease |ease-in | ease-out |linear&lt;/li&gt;
&lt;li&gt;animation-iteration-count（动画在结束前运行的次数）: 数字 | infinite&lt;/li&gt;
&lt;li&gt;animation-direction（方向）: reverse |alternate | alternate-reverse&lt;/li&gt;
&lt;li&gt;animation-fill-mode（填充方式）: none | forwards | backwards | both&lt;/li&gt;
&lt;li&gt;animation-play-state（是否赞停）: paused | running&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://gagenden.top/post/javascript%E7%AC%AC%E4%B8%80%E8%AF%BE/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/javascript%E7%AC%AC%E4%B8%80%E8%AF%BE/</guid>
      
        <description>

&lt;h2 id=&#34;javascript诞生&#34;&gt;JavaScript诞生&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;它最初由Netscape的Brendan Eich设计。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;1996年，Ecma国际以JavaScript为基础制定了ECMAScript标准。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;完整的JavaScript实现包含三个部分：ECMAScript，文档对象模型，浏览器对象模型。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;javascript的十个设计缺陷&#34;&gt;JavaScript的十个设计缺陷&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 不适合开发大型程序&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;Javascript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载。&lt;br/&gt;
&lt;strong&gt;2. 非常小的标准库&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;Javascript提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。&lt;br/&gt;
&lt;strong&gt;3. null和undefined&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;null属于对象（object）的一种，意思是该对象为空；undefined则是一种数据类型，表示未定义。&lt;br/&gt;
&amp;ensp;&amp;ensp;两者很容易混淆，但含义完全不同。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var foo;
    alert(foo == null); // true
    alert(foo == undefined); // true
    alert(foo === null); // false
    alert(foo === undefined); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. 全局变量难以控制&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性。&lt;br/&gt;
&lt;strong&gt;5. 自动在行尾添加分号&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。&lt;br/&gt;
&lt;strong&gt;6. 加号运算符&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;+号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接。如果一个操作项是字符，另一个操作项是数字，则数字自动转化为字符。&lt;br/&gt;
&lt;strong&gt;7. NaN&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;NaN是一种数字，表示超出了解释器的极限。它有一些很奇怪的特性。&lt;br/&gt;
&lt;strong&gt;8. 数组和对象的区分&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;由于Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组，相当麻烦。&lt;br/&gt;
&lt;strong&gt;9. == 和 ===&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;==用来判断两个值是否相等。当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉。&lt;br/&gt;
&lt;strong&gt;10. 基本类型的包装对象&lt;/strong&gt;&lt;br/&gt;
&amp;ensp;&amp;ensp;Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象。与基本数据类型对应的对象类型，作用很小，造成的混淆却很大。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://gagenden.top/post/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/%E6%B5%85%E6%9E%90url/</guid>
      
        <description>

&lt;h1 id=&#34;浅析-url&#34;&gt;浅析 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;URL 指的是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个独特的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，有一些例外，最常见的情况就是 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的 URL。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;url-的组成&#34;&gt;URL 的组成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;协议&lt;/li&gt;
&lt;li&gt;域名或者 IP&lt;/li&gt;
&lt;li&gt;端口号（http 默认端口是 80，https 默认端口是 443，ftp 默认端口是 21）&lt;/li&gt;
&lt;li&gt;路径&lt;/li&gt;
&lt;li&gt;查询字符串&lt;/li&gt;
&lt;li&gt;锚点&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dns-的作用&#34;&gt;DNS 的作用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DNS 让 IP 和域名对应起来&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nslookup&#34;&gt;nslookup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;nslookup 命令用来查询 DNS 的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。&lt;/li&gt;
&lt;li&gt;nslookup 域名&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ip-的作用&#34;&gt;IP 的作用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;定位一台设备。&lt;/li&gt;
&lt;li&gt;封装数据报文。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ping-的命令使用&#34;&gt;ping 的命令使用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ping IP 地址&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;域名&#34;&gt;域名&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Domain Name&lt;/li&gt;
&lt;li&gt;是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个 IP 地址的代称。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;域名分类&#34;&gt;域名分类&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;顶级域名： .com / .cn / .org 等&lt;/li&gt;
&lt;li&gt;二级域名： baidu.com / google.com 等&lt;/li&gt;
&lt;li&gt;三级域名： www.baidu.com / blog.163.com 等&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>使用GitHub Pages预览HTML</title>
      <link>http://gagenden.top/post/%E4%BD%BF%E7%94%A8github-pages%E9%A2%84%E8%A7%88html/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/%E4%BD%BF%E7%94%A8github-pages%E9%A2%84%E8%A7%88html/</guid>
      
        <description>

&lt;h1 id=&#34;使用-github-pages-预览-html&#34;&gt;使用 GitHub Pages 预览 HTML&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;进入一个仓库，点击 Settings&lt;/li&gt;
&lt;li&gt;找到 Github Pages,将 None 选为 master branch&lt;/li&gt;
&lt;li&gt;刷新页面，重新来到 Github Pages，将会看到一个链接&lt;/li&gt;
&lt;li&gt;点击链接即可预览 HTML。如果不行就在链接后面加上&lt;code&gt;/html文件名.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>http://gagenden.top/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>

&lt;h1 id=&#34;使用-hugo-搭建个人博客&#34;&gt;使用 hugo 搭建个人博客&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一步：Windows 下安装 hugo。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;去 Hugo releases 页面&lt;/a&gt;下载 hugo_xxx_windows-64bit.zip。（我自己使用的是 v0.56.3）&lt;/li&gt;
&lt;li&gt;解压，把 hugo.exe 放到某个路径（如：D:Software\hugo\hugo.exe）。&lt;/li&gt;
&lt;li&gt;将某个路径（如：D:Software\hugo）加到 PATH。&lt;/li&gt;
&lt;li&gt;重启终端，输入命令：hugo version 查看 hugo 版本。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开始搭建博客。参考&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;hugo 官网-Quick Start&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建一个新项目：&lt;code&gt;hugo new site 目录（如：gagenden.github.io-creator）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入新建的项目：&lt;code&gt;cd 目录（如：gagenden.github.io-creator）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化： &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加主题：&lt;code&gt;git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置主题： &lt;code&gt;echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加博客： &lt;code&gt;hugo new posts/文章名字.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行： &lt;code&gt;hugo server -D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生成 public 目录：&lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上传 github&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将 public 目录添加到.gitignore 中&lt;/li&gt;
&lt;li&gt;切换到 public 目录&lt;/li&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit -v&lt;/li&gt;
&lt;li&gt;上传到 github 的那两句话&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>flex布局</title>
      <link>http://gagenden.top/post/flex%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/flex%E5%B8%83%E5%B1%80/</guid>
      
        <description>

&lt;h1 id=&#34;flex-布局&#34;&gt;flex 布局&lt;/h1&gt;

&lt;h2 id=&#34;container-容器-里的样式以及属性&#34;&gt;container（容器）里的样式以及属性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;让一个元素变成 flex 容器：&lt;br&gt;
&lt;code&gt;display: flex/inline-flex;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改变 items 的流动方向（主轴方向）&lt;br&gt;
&lt;code&gt;flex-direction: column/row(默认横着)/row-reverse/column-reverse;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改变折行&lt;br&gt;
&lt;code&gt;flex-wrap: no-wrap/wrap/wrap-reverse;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主轴的对齐方式&lt;br&gt;
&lt;code&gt;justify-content: flex-start/flex-end/center/space-between/space-around/space-evenly;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;次轴&lt;br&gt;
&lt;code&gt;align-items: center/flex-end/flex-start;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;items-子元素-项目-的样式以及属性&#34;&gt;items(子元素、项目)的样式以及属性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;item 的排列顺序&lt;br&gt;
&lt;code&gt;order: number(越小的排越前);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何控制长胖(分配多余的空间，分配几份给 item)&lt;br&gt;
&lt;code&gt;flex-grow: 1／数字；&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;控制如何变瘦&lt;br&gt;
&lt;code&gt;flex-shrink: 数字（默认是1,0是防止变瘦）&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;推荐小游戏&#34;&gt;推荐小游戏&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://flexboxfroggy.com/&#34;&gt;青蛙游戏&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>css-float布局</title>
      <link>http://gagenden.top/post/css-float%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/css-float%E5%B8%83%E5%B1%80/</guid>
      
        <description>

&lt;h1 id=&#34;css-float-布局&#34;&gt;css-float 布局&lt;/h1&gt;

&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;

&lt;p&gt;第一步：给子元素添加上 float：left/right;
第二步：一定要给其父元素加上.clearfix;如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clearfix::after {
  content: &#39;&#39;;
  display: block;
  clear: both;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;浮动会脱离文档流。（浮动元素会漂在块级元素上）&lt;/li&gt;
&lt;li&gt;绝对定位也会脱离文档流。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;平均布局&#34;&gt;平均布局&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;实现平均布局的时候，要点就是给所有的子元素添加一个父 div,给该 div 设置负 margin 就好了。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>散记</title>
      <link>http://gagenden.top/post/%E6%95%A3%E8%AE%B001/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/%E6%95%A3%E8%AE%B001/</guid>
      
        <description>

&lt;h1 id=&#34;散记&#34;&gt;散记&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;记住: box-sizing：border-box 的时候，使用 border：1px solid xx;会干扰计算宽度，这时使用 outline：1px solid xx;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;块级元素，有固定宽度，如何实现水平居中。
使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;margin-left: auto;
margin-right: auto;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为了防止图片下面有小缝隙，应该给 img 添加以下的样式：
&lt;code&gt;vertical-align: middle;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当页面尺寸缩小或者放大时，布局的宽高会出现小数。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://gagenden.top/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gagenden.top/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      
        <description>

&lt;h1 id=&#34;html-常用标签&#34;&gt;HTML 常用标签&lt;/h1&gt;

&lt;h3 id=&#34;a-标签的用法&#34;&gt;a 标签的用法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;属性 1：href(hyper reference) 超级引用。&lt;/li&gt;
&lt;li&gt;取值：网址（推荐使用//xxxx.com）、路径、伪协议（JavaScript:js 代码/什么都没有;mailto:邮箱地址；tel:手机号码）、标签的 id。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;属性 2：target（决定跳转的链接在哪里打开）&lt;/li&gt;
&lt;li&gt;取值：_self(默认值，当前页面打开)、_blank(在新的页面打开)、_top(在顶级窗口打开)、_parent(在父级窗口打开)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;img-标签的用法&#34;&gt;img 标签的用法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;作用是发起 get 请求，展示图片&lt;/li&gt;
&lt;li&gt;属性 1：alt(图片加载失败的时的提示文字)&lt;/li&gt;
&lt;li&gt;属性 2：src(source)(图片路径)&lt;/li&gt;
&lt;li&gt;属性 3：height(高度)&lt;/li&gt;
&lt;li&gt;属性 4：width(宽度)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;注意-实现响应式-在手机页面上展示图片-max-width-100&#34;&gt;注意：实现响应式（在手机页面上展示图片）&amp;ndash;&amp;gt; max-width：100%;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;table-标签的用法&#34;&gt;table 标签的用法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;常用的标签（table、thead、tbody、tfoot、th、tr、td）&lt;/li&gt;
&lt;li&gt;注意的样式 1：table-layout&lt;/li&gt;
&lt;li&gt;注意的样式 2：border-collapse（决定是否合并 collapse(合并) | separate（分开））&lt;/li&gt;
&lt;li&gt;注意的样式 3：border-spacing（每个 td 之间的间隙）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;感想&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;虽然之前有的标签使用过，但是还是有很多的知识点没有掌握，需要好好吸收下这些知识。还有 width 的读音，发现自己一直都是读错的，英语小课堂还是很好的。哈哈哈。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>文档流</title>
      <link>http://gagenden.top/post/%E6%96%87%E6%A1%A3%E6%B5%81/</link>
      <pubDate>Sat, 24 Aug 2019 17:51:21 +0800</pubDate>
      
      <guid>http://gagenden.top/post/%E6%96%87%E6%A1%A3%E6%B5%81/</guid>
      
        <description>

&lt;h1 id=&#34;文档流&#34;&gt;文档流&lt;/h1&gt;

&lt;h3 id=&#34;1-脱离文档流&#34;&gt;1.脱离文档流&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;浮动元素会脱离文档流，也就是说浮动元素会飘在块级元素上&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-流动方向&#34;&gt;2.流动方向&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;inline 元素从左到右，到达最右边才会换行。&lt;/li&gt;
&lt;li&gt;block 元素从上到下，每一个都是另起一行。&lt;/li&gt;
&lt;li&gt;inline-block 也是从左到右。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-宽度&#34;&gt;3.宽度&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;inline 宽度为内部 inline 元素的和，不能用 width 直接指定。&lt;/li&gt;
&lt;li&gt;block 元素默认宽度为 auto（width：auto），可以用 width 指定。&lt;/li&gt;
&lt;li&gt;inline-block 结合前两者的特点，可以用 width 设置宽度。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-高度&#34;&gt;4.高度&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;inline 高度由 line-height 间接确定，跟 height 无关。&lt;/li&gt;
&lt;li&gt;block 高度由内部文档流元素决定，可以设置 height。&lt;/li&gt;
&lt;li&gt;inline-block 跟 block 类似，可以设置 height。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Html First Day</title>
      <link>http://gagenden.top/post/html-first-day/</link>
      <pubDate>Sat, 24 Aug 2019 17:34:21 +0800</pubDate>
      
      <guid>http://gagenden.top/post/html-first-day/</guid>
      
        <description>

&lt;h1 id=&#34;html-入门笔记-1&#34;&gt;《HTML 入门笔记 1》&lt;/h1&gt;

&lt;h3 id=&#34;i-html-是由蒂姆-伯纳斯-李-tim-berners-lee-创建&#34;&gt;i.HTML 是由蒂姆·伯纳斯－李（Tim Berners-Lee）创建。&lt;/h3&gt;

&lt;h3 id=&#34;ii-html-起手应该先写-doctype-html-快捷键是-tab&#34;&gt;ii.HTML 起手应该先写&amp;lt;!DOCTYPE html&amp;gt; 快捷键是!+Tab&lt;/h3&gt;

&lt;h3 id=&#34;iii-章节标签有&#34;&gt;iii.章节标签有：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;标题：h1~h6&lt;/li&gt;
&lt;li&gt;头部：header&lt;/li&gt;
&lt;li&gt;章节：section&lt;/li&gt;
&lt;li&gt;文章：article&lt;/li&gt;
&lt;li&gt;段落：p&lt;/li&gt;
&lt;li&gt;主要内容：main&lt;/li&gt;
&lt;li&gt;旁支内容：aside&lt;/li&gt;
&lt;li&gt;划分：div&lt;/li&gt;
&lt;li&gt;脚部：footer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;iv-全局属性&#34;&gt;iv.全局属性：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;样式：style&lt;/li&gt;
&lt;li&gt;可编辑：contenteditable&lt;/li&gt;
&lt;li&gt;类：class&lt;/li&gt;
&lt;li&gt;ID：尽量少使用 id 属性&lt;/li&gt;
&lt;li&gt;title：为元素添加说明&lt;/li&gt;
&lt;li&gt;tabindex：鼠标操作。注意：tabindex=0 是最后一个访问，tabindex=-1 是永远不访问。&lt;/li&gt;
&lt;li&gt;hidden：隐藏。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;v-内容标签&#34;&gt;v.内容标签：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无序列表：ul+li&lt;/li&gt;
&lt;li&gt;有序列表：ol+li&lt;/li&gt;
&lt;li&gt;描述列表：dl+dt+dd&lt;/li&gt;
&lt;li&gt;分割线：&amp;lt;hr&amp;gt;单标签&lt;/li&gt;
&lt;li&gt;换行：&amp;lt;br&amp;gt;单标签&lt;/li&gt;
&lt;li&gt;超链接： a&lt;/li&gt;
&lt;li&gt;包裹代码：code&lt;/li&gt;
&lt;li&gt;欲保留空格、换行：pre&lt;/li&gt;
&lt;li&gt;引用：quote&lt;/li&gt;
&lt;li&gt;换行引用： blockquote&lt;/li&gt;
&lt;li&gt;语气上强调：em&lt;/li&gt;
&lt;li&gt;内容的重要性：strong&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
